{"ast":null,"code":"/**\r\n * Created by hustcc on 18/5/20.\r\n * Contract: i@hust.cc\r\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\r\n * format Date / string / timestamp to timestamp\r\n * @param input\r\n * @returns {*}\r\n */\nexport function toDate(input) {\n  if (input instanceof Date) return input;\n  // @ts-ignore\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\n  input = (input || ''\n  // @ts-ignore\n  ).trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n  return new Date(input);\n}\n/**\r\n * format the diff second to *** time ago, with setting locale\r\n * @param diff\r\n * @param localeFunc\r\n * @returns\r\n */\nexport function formatDiff(diff, localeFunc) {\n  /**\r\n   * if locale is not exist, use defaultLocale.\r\n   * if defaultLocale is not exist, use build-in `en`.\r\n   * be sure of no error when locale is not exist.\r\n   *\r\n   * If `time in`, then 1\r\n   * If `time ago`, then 0\r\n   */\n  var agoIn = diff < 0 ? 1 : 0;\n  /**\r\n   * Get absolute value of number (|diff| is non-negative) value of x\r\n   * |diff| = diff if diff is positive\r\n   * |diff| = -diff if diff is negative\r\n   * |0| = 0\r\n   */\n  diff = Math.abs(diff);\n  /**\r\n   * Time in seconds\r\n   */\n  var totalSec = diff;\n  /**\r\n   * Unit of time\r\n   */\n  var idx = 0;\n  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n    diff /= SEC_ARRAY[idx];\n  }\n  /**\r\n   * Math.floor() is alternative of ~~\r\n   *\r\n   * The differences and bugs:\r\n   * Math.floor(3.7) -> 4 but ~~3.7 -> 3\r\n   * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\r\n   *\r\n   * More information about the performance of algebraic:\r\n   * https://www.youtube.com/watch?v=65-RbBwZQdU\r\n   */\n  diff = Math.floor(diff);\n  idx *= 2;\n  if (diff > (idx === 0 ? 9 : 1)) idx += 1;\n  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\r\n * calculate the diff second between date to be formatted an now date.\r\n * @param date\r\n * @param relativeDate\r\n * @returns {number}\r\n */\nexport function diffSec(date, relativeDate) {\n  var relDate = relativeDate ? toDate(relativeDate) : new Date();\n  return (+relDate - +toDate(date)) / 1000;\n}\n/**\r\n * nextInterval: calculate the next interval time.\r\n * - diff: the diff sec between now and date to be formatted.\r\n *\r\n * What's the meaning?\r\n * diff = 61 then return 59\r\n * diff = 3601 (an hour + 1 second), then return 3599\r\n * make the interval with high performance.\r\n **/\nexport function nextInterval(diff) {\n  var rst = 1,\n    i = 0,\n    d = Math.abs(diff);\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n}","map":{"version":3,"names":["SEC_ARRAY","toDate","input","Date","isNaN","test","parseInt","trim","replace","formatDiff","diff","localeFunc","agoIn","Math","abs","totalSec","idx","length","floor","toString","diffSec","date","relativeDate","relDate","nextInterval","rst","i","d","ceil"],"sources":["../../src/utils/date.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}